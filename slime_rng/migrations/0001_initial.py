# Generated by Django 5.2.4 on 2025-07-15 16:01

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('thumbnail', models.URLField(max_length=500)),
                ('reward', models.TextField()),
            ],
            options={
                'verbose_name': 'Коллекция',
                'verbose_name_plural': 'Коллекции',
            },
        ),
        migrations.CreateModel(
            name='CraftRecipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('image', models.URLField(max_length=500)),
                ('effect', models.TextField()),
                ('created_by_default', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Рецепт крафта',
                'verbose_name_plural': 'Рецепты крафта',
            },
        ),
        migrations.CreateModel(
            name='SlimeType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('image', models.URLField(max_length=500)),
                ('chance', models.CharField(max_length=50)),
                ('rarity', models.CharField(choices=[('common', 'Обычный'), ('uncommon', 'Необычный'), ('rare', 'Редкий'), ('epic', 'Эпический'), ('legendary', 'Легендарный'), ('mythic', 'Мифический'), ('divine', 'Божественный')], max_length=20)),
                ('base_amount', models.PositiveIntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Тип слайма',
                'verbose_name_plural': 'Типы слаймов',
                'ordering': ['rarity'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('animation_enabled', models.BooleanField(default=True)),
                ('auto_save_enabled', models.BooleanField(default=True)),
                ('last_login', models.DateTimeField(auto_now=True)),
                ('collections_visible', models.BooleanField(default=True)),
                ('index_visible', models.BooleanField(default=True)),
                ('total_spins', models.PositiveIntegerField(default=0)),
                ('rare_slimes_found', models.PositiveIntegerField(default=0)),
                ('harvest_multiplier', models.FloatField(default=1.0)),
                ('spin_cooldown', models.PositiveIntegerField(default=1000)),
                ('rare_chance_boost', models.FloatField(default=0.0)),
                ('epic_chance_boost', models.FloatField(default=0.0)),
                ('divine_chance_multiplier', models.FloatField(default=1.0)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Игрок',
                'verbose_name_plural': 'Игроки',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='PlayerCollection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('completed', models.BooleanField(default=False)),
                ('claimed', models.BooleanField(default=False)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='slime_rng.collection')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collections', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Коллекция игрока',
                'verbose_name_plural': 'Коллекции игроков',
                'unique_together': {('player', 'collection')},
            },
        ),
        migrations.CreateModel(
            name='PlayerCraft',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='crafts', to=settings.AUTH_USER_MODEL)),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='slime_rng.craftrecipe')),
            ],
            options={
                'verbose_name': 'Созданный предмет',
                'verbose_name_plural': 'Созданные предметы',
                'unique_together': {('player', 'recipe')},
            },
        ),
        migrations.CreateModel(
            name='PlayerInventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.PositiveIntegerField(default=0)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory', to=settings.AUTH_USER_MODEL)),
                ('slime_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='slime_rng.slimetype')),
            ],
            options={
                'verbose_name': 'Инвентарь игрока',
                'verbose_name_plural': 'Инвентари игроков',
                'indexes': [models.Index(fields=['player', 'slime_type'], name='slime_rng_p_player__99bded_idx')],
                'unique_together': {('player', 'slime_type')},
            },
        ),
        migrations.CreateModel(
            name='CraftIngredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.PositiveIntegerField()),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ingredients', to='slime_rng.craftrecipe')),
                ('slime_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='slime_rng.slimetype')),
            ],
            options={
                'verbose_name': 'Ингредиент крафта',
                'verbose_name_plural': 'Ингредиенты крафта',
                'unique_together': {('recipe', 'slime_type')},
            },
        ),
        migrations.CreateModel(
            name='CollectionRequirement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.PositiveIntegerField()),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requirements', to='slime_rng.collection')),
                ('slime_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='slime_rng.slimetype')),
            ],
            options={
                'verbose_name': 'Требование коллекции',
                'verbose_name_plural': 'Требования коллекций',
                'unique_together': {('collection', 'slime_type')},
            },
        ),
    ]
